// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/x1unix/tg-stargazers-bot/internal/config"
	"github.com/x1unix/tg-stargazers-bot/internal/handlers/chat"
	"github.com/x1unix/tg-stargazers-bot/internal/repository"
	"github.com/x1unix/tg-stargazers-bot/internal/services"
	"github.com/x1unix/tg-stargazers-bot/internal/services/auth"
	"github.com/x1unix/tg-stargazers-bot/internal/services/bot"
)

// Injectors from wire.go:

// BuildService constructs service instance with app dependencies using Wire.
func BuildService() (*Service, error) {
	commandFlags := config.ReadCommandFlags()
	configConfig, err := config.FromEnv(commandFlags)
	if err != nil {
		return nil, err
	}
	logger, err := provideLogger(configConfig)
	if err != nil {
		return nil, err
	}
	botConfig := provideBotConfig(configConfig)
	gitHubService := provideGitHubService(configConfig)
	handlers := chat.NewHandlers(configConfig, gitHubService)
	eventHandler := services.NewEventRouter(handlers)
	service, err := bot.NewService(logger, botConfig, eventHandler)
	if err != nil {
		return nil, err
	}
	resolvedAuthConfig, err := provideAuthConfig(configConfig)
	if err != nil {
		return nil, err
	}
	client, err := provideRedis(configConfig)
	if err != nil {
		return nil, err
	}
	tokenRepository := repository.NewTokenRepository(client)
	authService := auth.NewService(logger, resolvedAuthConfig, tokenRepository)
	appService := NewService(logger, configConfig, service, authService)
	return appService, nil
}
